#!/usr/bin/env python3

import subprocess
import os, sys, time, re
import argparse
import pprint

def intlist(l):
    return list(map(int, l))

def parse_desktop(s):
    f = s.split()
    n = int (f[0])
    wh = intlist(f[8].split('x')) # WA
    xy = intlist(f[7].split(',')) # WA
    vxy = intlist(f[5].split(',')) # VP
    dwh = intlist(f[3].split('x')) # DG
    res = {
        # Is display current?
        'is_current': f[1]=='*',
        # Display geometry:
        'display_w' : dwh[0], 
        'display_h' : dwh[1],
        # Viewport position:
        'viewport_x': vxy[0], 
        'viewport_y': vxy[1],
        # Work Area:
        'area_x': xy[0], 
        'area_y': xy[1],
        'area_w': wh[0],
        'area_h': wh[1]
        }
    return (n,res)

def dconf_read(k):
    return subprocess.check_output(["dconf", "read", k]).decode("utf-8").strip()

def get_workspaces():
    # should be using Gio
    w = [int (dconf_read(k)) for k in
        ["/org/compiz/profiles/unity/plugins/core/hsize",
        "/org/compiz/profiles/unity/plugins/core/hsize"]]
    return {
        'hsize': w[0],
        'vsize': w[1]
        }

def get_desktops():
    return dict([parse_desktop(l) for l in subprocess.check_output(["wmctrl", "-d"]).decode("utf-8").splitlines()])


def parse_output(s):
    l = intlist(re.split(r'[x\+]',s))
    return {
        'w': l[0],
        'h': l[1],
        'x': l[2],
        'y': l[3]
        }

def get_outputs():
    s = dconf_read("/org/compiz/profiles/unity/plugins/core/outputs")
    return [parse_output(o.strip(' []\'')) for o in s.split(",")]
        
def get_wm_info():
    res = {
        "desktops" : get_desktops(),
        "workspaces": get_workspaces(),
        "outputs": get_outputs()
        }
    return res


def calc_viewport(ctx,desktop,monitor,wx,wy):
    """
    Calculate viewport for given workspace/monitor

    :param ctx: current context, as returned by `get_wm_info`
    :param desktop: usually 0
    :param monitor: physical monitor (aka `output`) number
    :param wx: workspace column number
    :param wy: workspace row number
    :return: viewport config (x,y,w,h)
    """
    d = ctx['desktops'][desktop]
    ww = d['display_w'] // ctx['workspaces']['hsize']
    wh = d['display_h'] // ctx['workspaces']['vsize']
    o = ctx['outputs'][monitor]
    
    return (ww*wx+o['x']+d['area_x'], wh*wy+o['y']+d['area_y'], o['w'], o['h'])


parser = argparse.ArgumentParser(description='Calculate window geometry')
parser.add_argument('-d', '--desktop', type=int, default=0, help="desktop number")
parser.add_argument('-m', '--monitor', type=int, default=0, help="monitor number")
parser.add_argument('-c', '--column' , type=int, default=0, help="workspace column number")
parser.add_argument('-r', '--row'    , type=int, default=0, help="workspace row number")
parser.add_argument('-p', '--print'  , type=bool, default=False, help="print internal detected display configuration")
parser.add_argument('-f', '--full'   , type=bool, default=True, help="occupy full workspace")
parser.add_argument('-g', '--gravity', type=int, default=0, help="WM gravity (pass-through parameter)")
args = parser.parse_args()

ctx = get_wm_info()
if args.print:
    pprint.pprint (ctx)
elif args.full:
    print("%d,%d,%d,%d,%d" % 
          ((args.gravity,) + calc_viewport(ctx,args.desktop,args.monitor,args.column,args.row)))
else:
    print("Unsupported!")
    sys.exit(1)

